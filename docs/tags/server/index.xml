<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>server on v2how</title>
    <link>https://v2how.github.io/tags/server/</link>
    <description>Recent content in server on v2how</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>amyw32@protonmail.com (Amy)</managingEditor>
    <webMaster>amyw32@protonmail.com (Amy)</webMaster>
    <lastBuildDate>Thu, 11 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://v2how.github.io/tags/server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Build a Shadowsocks-Rust Server with Docker on Ubuntu 20.04</title>
      <link>https://v2how.github.io/post/2021-03-11-shadowsocks-rust-docker-ubuntu-20-04/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      <author>amyw32@protonmail.com (Amy)</author>
      <guid>https://v2how.github.io/post/2021-03-11-shadowsocks-rust-docker-ubuntu-20-04/</guid>
      <description>Introduction In this tutorial you&amp;rsquo;ll learn how to create your own Shadowsocks server on an Ubuntu 20.04 platform using Docker.
The server you&amp;rsquo;ll build will implement the authenticated encryption with associated data (AEAD) cipher chacha20-ietf-poly1305. You&amp;rsquo;ll test your server with the Shadowsocks for Windows graphical user interface (GUI) client.
At the end of this tutorial, you&amp;rsquo;ll have a working and tested Shadowsocks server.
Prerequisites Before you begin this tutorial, you will need a virtual private server (VPS) running Ubuntu 20.</description>
    </item>
    
    <item>
      <title>How to Create a VLESS WebSocket TLS CDN Server on Ubuntu 20.04</title>
      <link>https://v2how.github.io/post/2021-03-11-vless-ws-tls-cdn-server-ubuntu-20-04/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      <author>amyw32@protonmail.com (Amy)</author>
      <guid>https://v2how.github.io/post/2021-03-11-vless-ws-tls-cdn-server-ubuntu-20-04/</guid>
      <description>Introduction In this tutorial you&amp;rsquo;ll learn how to create your own V2Ray server on an Ubuntu 20.04 platform using the Mack-A script.
The server you build will implement the VLESS + WebSocket (WS) + TLS + Content Delivery Network (CDN) architecture. You&amp;rsquo;ll test your server with the Qv2ray graphical user interface (GUI) client.
At the end of this tutorial, you&amp;rsquo;ll have a working and tested V2Ray server.
Prerequisites Before you begin this tutorial, you will need:</description>
    </item>
    
    <item>
      <title>How to Create a Brook Server and Client on Ubuntu 20.04</title>
      <link>https://v2how.github.io/post/2021-02-26-brook-server-client-ubuntu-20-04/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      <author>amyw32@protonmail.com (Amy)</author>
      <guid>https://v2how.github.io/post/2021-02-26-brook-server-client-ubuntu-20-04/</guid>
      <description>Introduction Brook is a cross-platform proxy server and client that provides strong encryption and resistance to detection.
The design philosopy of Brook is to keep it simple. There are no complicated configuration files, and you can run Brook as a daemon without systemd.
In this tutorial you&amp;rsquo;ll see how to run a Brook server on Ubuntu 20.04 and how to test your server with a Brook client, also running on Ubuntu 20.</description>
    </item>
    
    <item>
      <title>How to Build a Camouflaged Telegram MTProto Proxy Server on Ubuntu 20.04</title>
      <link>https://v2how.github.io/post/2021-02-18-camouflage-telegram-mtproto-proxy-ubuntu-20-04/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      <author>amyw32@protonmail.com (Amy)</author>
      <guid>https://v2how.github.io/post/2021-02-18-camouflage-telegram-mtproto-proxy-ubuntu-20-04/</guid>
      <description>Introduction Telegram Messenger supports two kinds of proxies: a standard SOCKS5 proxy server and an MTProto proxy server.
In this post you&amp;rsquo;ll learn how to build a camouflaged MTProto proxy server. This style of proxy can help you bypass censorship in certain countries.
By following along, you&amp;rsquo;ll see how to create an Nginx camouflage web server and a hidden MTProto proxy server that implements the fake TLS protocol on the same host as the web server.</description>
    </item>
    
    <item>
      <title>How to Build a V2Ray Tor On-Ramp on Ubuntu 20.04</title>
      <link>https://v2how.github.io/post/2021-02-15-v2ray-tor-on-ramp-ubuntu-20-04/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <author>amyw32@protonmail.com (Amy)</author>
      <guid>https://v2how.github.io/post/2021-02-15-v2ray-tor-on-ramp-ubuntu-20-04/</guid>
      <description>Introduction Are you in a country where the Tor Project website is blocked, the Tor protocol is blocked, and Tor bridges are also blocked?
If so, this post offers a last resort for situations when all other methods of reaching Tor have failed. You&amp;rsquo;ll learn how to create a Tor on-ramp on an Ubuntu 20.04 server located outside your country. With this method you can bypass censorship and connect to the Tor network from your existing browser.</description>
    </item>
    
    <item>
      <title>How to Create an Xray VLESS XTLS Server on Ubuntu 20.04</title>
      <link>https://v2how.github.io/post/2021-02-12-xray-vless-xtls-server-ubuntu-20-04/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      <author>amyw32@protonmail.com (Amy)</author>
      <guid>https://v2how.github.io/post/2021-02-12-xray-vless-xtls-server-ubuntu-20-04/</guid>
      <description>Introduction In this tutorial you&amp;rsquo;ll learn how to install Xray on an Ubuntu 20.04 server.
You&amp;rsquo;ll see how to create a camouflage web server with Nginx, and then you&amp;rsquo;ll see how to install and configure Xray for the VLESS protocol with XTLS security. You&amp;rsquo;ll then test your server with the Qv2ray graphical user interface.
At the end of this tutorial, you&amp;rsquo;ll have a working and tested Xray server.
Prerequisites Before you begin this tutorial, you will need:</description>
    </item>
    
  </channel>
</rss>
